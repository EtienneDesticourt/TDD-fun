/Design doc conventions
/All objects used by another object must be defined beforehand unless they're primitives or there is a circular relationship
/Objects are demarked in uppercase in their definition and in lowercase (except for first letter) in all other instances
/Primitives are fully lowercase and need not be defined
/Keywords:
/Is is used for hierarchy
/Has is ownership
/Can is functionnality and is followed by verb and complement
/Can Use allows the object to use the functionnalities of another object with a wrapper
/As can be used to describe the role of an owned object

RECT 
	Has coordinates
	Has size
	Can collide with a Zone
ZONE
	Is a Rect
	Can be added to another Zone
ENTITY
	Has Zone
	Has affiliation
	Has life
POINT
	Has coordinates
PATH
	Has Points As markers
	Has widths
	Can calculate projection of point on path
ACTION
	Has name
	Has Action As next Action
	Can check if it's been completed
FLOCKER
	Has Flockers As Flock
	Has Zone
	Can avoid
	Can align
	Can cohere
	Can seek
	Can queue

CHARACTER
	Is Entity
	Is Flocker
	Has speed
	Has strength
	Has position on path
	Has an Action
	Can move Itself
	Can damage Entity As attack
	Can undamage Entity As build
	Can aim at position
	Can follow a Path
BUILDING
	Is Entity
	Has Zone
	Has Characters As models
	Can create Characters
MAP
	Has Zones As obstacles or Buildings
	Has Zones As Characters
	Has Buildings As Models
	Can create Buildings
	Can check if a Zone is occupied
	Can register Buildings
	Can register Characters
	Has Maps
	Has Paths
	Can create Paths
	Can update Paths
CLOCK
	Has tick
	Can increase number of ticks
WORKER
	Has Clock
	Has Characters
	Can make Characters perfom Actions
CONTROLLER
	Has Player
	Has Ai
	Can check if point is in Entity
	Can returns all Entities in a Zone
CAMERA
	Has coordinates
	Can convert its coordinates to real world coordinates
	Can convert real world coordinates to its coordinates
UI
	Has Player
	Can Use Player
FLOCK
	Has Entities
SYNCHER
	Has Entities
	Can hash Entities